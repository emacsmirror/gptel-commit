/AI-powered Git commit message generator for Emacs/

** Features

    ðŸ¤– Generates commit messages based on staged changes

    ðŸ’­ Optional rationale input for complex changes

    ðŸ”„ Streaming support for real-time generation

    ðŸŽ¯ Smart filtering of lock files and generated code

    ðŸ”§ Seamless integration with Magit

** Installation

*** Prerequisites

    Install and configure [[https://github.com/karthink/gptel][gptel]]

    Ensure you have Git installed and accessible from Emacs

*** Using straight.el

#+begin_src elisp
(straight-use-package '(gptel-commit :type git :host github :repo "lakkiy/gptel-commit"))
#+end_src

*** Using use-package

#+begin_src elisp
(use-package gptel-commit
  :vc (:url "https://github.com/lakkiy/gptel-commit")
  :after (gptel magit)
  :custom
  (gptel-commit-stream t))
#+end_src

*** Manual Installation

    Clone this repository

    Add to your load path:

#+begin_src elisp
(add-to-list 'load-path "/path/to/gptel-commit")
(require 'gptel-commit)
#+end_src

** Usage

*** Interactive Functions

Main functions available:

    =M-x gptel-commit= - Generate commit message directly from staged changes

    =M-x gptel-commit-rationale= - Generate with optional rationale/context prompt

*** Magit Integration

When using Magit, these functions work in commit message buffers. You can bind them to convenient keys in your configuration.

*** With Rationale

When using =gptel-commit-rationale=, you'll be prompted to explain why you're making these changes. This helps the AI generate more meaningful commit messages with proper context.

** Configuration

*** Customization Options

#+begin_src elisp
;; Enable/disable streaming (default: t)
(setq gptel-commit-stream t)

;; Use a specific backend for commit messages
;; (e.g., a cheaper model via OpenRouter)
(setq gptel-commit-backend my-openrouter-backend)

;; Exclude files from diff analysis (default patterns shown)
(setq gptel-commit-diff-excludes
      '("pnpm-lock.yaml"
        "*.lock"
        "ent/**/*.go"))
#+end_src

*** Hooks

=gptel-commit-after-insert-hook=: run after commit message is inserted.

** How It Works

    Analyzes staged changes using =git diff --cached=

    Filters out excluded files (lock files, generated code, etc.)

    Sends the diff to your configured LLM with a specialized prompt

    Formats the response according to conventional Git commit message format

    Inserts the message in your commit buffer

** Tips

    Keep your staged changes focused and logical

    Use the rationale feature for complex changes

    The AI works best with clear, well-structured code changes

    Review and edit the generated message as needed

** Contributing

Contributions are welcome! Please feel free to submit issues and pull requests.

** License

GPL-3.0

/This README was generated with assistance from Claude Sonnet 4/
